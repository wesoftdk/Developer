openapi: '3.0.0'

info:
  version: 0.1.0
  title: Wesoft Rental
  license:
    name: MIT

tags:
  - name: Properties
    description: >
      A property is a logical grouping of multiple tenancies.


      This grouping is purely logical, thus it doesn't necessarily correspond to any one physical location, although this is possible.
  - name: Tenancies
    description: >
      A tenancy is a unit that may be rented. 
      Tenancies are most often part of a property, however, this isn't always the case. 


      Tenancies may represent one of many different kinds of units.
  - name: Cases
    description: >
      A case represents a marketing campaign unit for a specific tenancy.


      Cases are "short lived", spanning from when their tenancy becomes vacant and thus needs to be advertised, until a tenant is found.
      This lifespan is represented in the form of a state, found in the `state` field.


      A case is initially created as a `draft`, populated by the data of it's associated tenancy, and that tenancy's associated property, if applicable.
      Cases in the `draft` state are meant for editing purposes only, and should not be exposed publicly in any way.

      
      Once the editor is ready, they may publish the case, transitioning it into the `active` state. Once a case transitions from `draft` to `active`, it may never go back.


      There may only ever exist a single `draft` or `active` case for any tenancy.


      Whilst `active` cases should be considered as being "published", this doesn't necessarily mean that the user intends for the case to be publicly visible yet. 
      Instead, the visibility of an `active` case, is defined by it's `visibility` field.
      It's currently up to the consumer to interpret a case's visibility and act accordingly, but each possible `visibility` does have an intended function.

        * `<TODO>` should not be exposed publicly
        * `private` should be exposed publicly, but not be listed anywhere
        * `public` should be exposed publicly and be listed

      The `visibility` of a case may change so long as the case is still `active`.


      Once a tenant has been found, or if for some other reason the case is no longer relevant, it will be closed, transitioning it from `active` to `archived`. Once a case transitions from `active` to `archived`, it may never go back.
      Cases in the `archived` state are used for historical purposes only, and should not be exposed publicly in any way.
      Any case that has been `archived` will be treated as read-only.
#  - name: Authentication
#    description: >
#      Authentication is handled using OAuth2 as provided by Auth0.
#  - name: Authorization

x-tagGroups:
#  - name: Authentication
#    tags: 
#      - Authentication
#      - Authorization
  - name: Marketing
    tags:
      - Properties
      - Tenancies
      - Cases

paths:
  /properties:
    get:
      summary: Get properties
      description: >
        Get a subset of all available properties.
      tags:
        - Properties
      parameters:
        - $ref: '#/components/parameters/queries.iteration.offset'
        - $ref: '#/components/parameters/queries.iteration.limit'
      responses:
        200:
          description: A subset of properties
          headers:
            X-Total:
              $ref: '#/components/headers/iteration.Total'
            X-Remaining:
              $ref: '#/components/headers/iteration.Remaining'
            X-Offset:
              $ref: '#/components/headers/iteration.Offset'
            X-Limit:
              $ref: '#/components/headers/iteration.Limit'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/entities.Property'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
    post:
      summary: Create a property
      tags:
        - Properties
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entities.Property'
      responses:
        201:
          description: The property was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Property'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'

  /properties/{propertyId}:
    parameters:
      - $ref: '#/components/parameters/identifiers.propertyId'
    get:
      summary: Get a property
      tags:
        - Properties
      responses:
        200:
          description: Property was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Property'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'
    patch:
      summary: Update a property
      tags:
        - Properties
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entities.Property'
      responses:
        200:
          description: Property has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Property'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'
    delete:
      summary: Delete a property
      tags:
        - Properties
      responses:
        204:
          description: Property was deleted
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'

  /properties/{propertyId}/images:
    parameters:
      - $ref: '#/components/parameters/identifiers.propertyId'
    post:
      summary: Add an image to a property
      tags:
        - Properties
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/entities.Image'
                - type: object
                  properties:
                    file:
                      type: string
                      format: binary
      responses:
        201:
          description: The image was added to the property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Image'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'

  /properties/{propertyId}/images/{imageId}:
    parameters:
      - $ref: '#/components/parameters/identifiers.propertyId'
      - $ref: '#/components/parameters/identifiers.imageId'
    patch:
      summary: Update a property's image
      tags:
        - Properties
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entities.Image'
      responses:
        200:
          description: Image was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Image'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'
    delete:
      tags:
        - Properties
      responses:
        204:
          description: Image was removed from the property
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'

  /properties/{propertyId}/contacts:
    parameters:
      - $ref: '#/components/parameters/identifiers.propertyId'
    post:
      summary: Add a contact to a property
      tags:
        - Properties
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entities.Contact'
      responses:
        201:
          description: The contact was added to the property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Contact'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'

  /properties/{propertyId}/contacts/{contactId}:
    parameters:
      - $ref: '#/components/parameters/identifiers.propertyId'
      - $ref: '#/components/parameters/identifiers.contactId'
    patch:
      summary: Update a property's contact
      tags:
        - Properties
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entities.Contact'
      responses:
        200:
          description: Contact was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Contact'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'
    delete:
      summary: Delete a property's contact
      tags:
        - Properties
      responses:
        204:
          description: Contact was removed from the property
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'

  /properties/{propertyId}/attributes:
    parameters:
      - $ref: '#/components/parameters/identifiers.propertyId'
    post:
      summary: Add an attribute to a property
      tags:
        - Properties
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entities.Attribute'
      responses:
        201:
          description: The attribute was added to the property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Attribute'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'

  /properties/{propertyId}/attributes/{attributeDefinitionId}:
    parameters:
      - $ref: '#/components/parameters/identifiers.propertyId'
      - $ref: '#/components/parameters/identifiers.attributeDefinitionId'
    patch:
      summary: Update a property's attribute
      tags:
        - Properties
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entities.Attribute'
      responses:
        200:
          description: Property was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Attribute'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'
    delete:
      summary: Remove a property's attribute
      tags:
        - Properties
      responses:
        204:
          description: Attribute was removed from the property
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'

  /tenancies:
    get:
      summary: Get tenancies
      tags:
        - Tenancies
      parameters:
        - $ref: '#/components/parameters/queries.iteration.offset'
        - $ref: '#/components/parameters/queries.iteration.limit'
      responses:
        200:
          description: A subset of tenancies
          headers:
            X-Total:
              $ref: '#/components/headers/iteration.Total'
            X-Remaining:
              $ref: '#/components/headers/iteration.Remaining'
            X-Offset:
              $ref: '#/components/headers/iteration.Offset'
            X-Limit:
              $ref: '#/components/headers/iteration.Limit'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/entities.Tenancy'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
    post:
      summary: Create a tenancy
      tags:
        - Tenancies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entities.Tenancy'
      responses:
        201:
          description: The tenancy was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Tenancy'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'

  /tenancies/{tenancyId}:
    parameters:
      - $ref: '#/components/parameters/identifiers.tenancyId'
    get:
      summary: Get a tenancy
      tags:
        - Tenancies
      responses:
        200:
          description: Property was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Tenancy'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'
    patch:
      summary: Update a tenancy
      tags:
        - Tenancies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entities.Tenancy'
      responses:
        200:
          description: Tenancy has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Tenancy'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'
    delete:
      summary: Delete a tenancy
      tags:
        - Tenancies
      responses:
        204:
          description: Property was deleted
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'
      

  /tenancies/{tenancyId}/cases:
    parameters:
      - $ref: '#/components/parameters/identifiers.tenancyId'
    post:
      summary: Create a case
      tags:
        - Tenancies
        - Cases
      responses:
        201:
          description: The case was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Case'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
      
  /tenancies/{tenancyId}/images:
    parameters:
      - $ref: '#/components/parameters/identifiers.tenancyId'
    post:
      summary: Add an image to a tenancy
      tags:
        - Tenancies
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: '#/components/schemas/entities.Image'
                - type: object
                  properties:
                    file:
                      type: string
                      format: binary
      responses:
        201:
          description: The image was added to the property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Image'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'



  /tenancies/{tenancyId}/images/{imageId}:
    parameters:
      - $ref: '#/components/parameters/identifiers.tenancyId'
      - $ref: '#/components/parameters/identifiers.imageId'
    patch:
      summary: Update a tenancy's image
      tags:
        - Tenancies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entities.Image'
      responses:
        200:
          description: Image was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Image'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'
    delete:
      summary: Remove a tenancy's image
      tags:
        - Tenancies
      responses:
        204:
          description: Image was removed from the tenancy
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'

  /tenancies/{tenancyId}/contacts:
    parameters:
      - $ref: '#/components/parameters/identifiers.tenancyId'
    post:
      summary: Add a contact to a tenancy
      tags:
        - Tenancies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entities.Contact'
      responses:
        201:
          description: The contact was added to the tenancy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Contact'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'

  /tenancies/{tenancyId}/contacts/{contactId}:
    parameters:
      - $ref: '#/components/parameters/identifiers.tenancyId'
      - $ref: '#/components/parameters/identifiers.contactId'
    patch:
      summary: Update a tenancy's contact
      tags:
        - Tenancies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entities.Contact'
      responses:
        200:
          description: Contact was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Contact'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'
    delete:
      summary: Delete a tenancy's contact
      tags:
        - Tenancies
      responses:
        204:
          description: Contact was removed from the tenancy
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'

  /tenancies/{tenancyId}/attributes:
    parameters:
      - $ref: '#/components/parameters/identifiers.tenancyId'
    post:
      summary: Add an attribute to a tenancy
      tags:
        - Tenancies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entities.Attribute'
      responses:
        201:
          description: The attribute was added to the tenancy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Attribute'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'

  /tenancies/{tenancyId}/attributes/{attributeDefinitionId}:
    parameters:
      - $ref: '#/components/parameters/identifiers.tenancyId'
      - $ref: '#/components/parameters/identifiers.attributeDefinitionId'
    patch:
      summary: Update a tenancy's attribute
      tags:
        - Tenancies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entities.Attribute'
      responses:
        200:
          description: Property was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Attribute'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'
    delete:
      summary: Remove a tenancy's attribute
      tags:
        - Tenancies
      responses:
        204:
          description: Attribute was removed from the tenancy
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'

  /cases:
    get:
      summary: Get cases
      description: >
        This endpoint is meant for doing a full copy off all cases, no matter their state. If only cases in a certain state is required, refer to the query endpoint instead.
      operationId: get-cases
      tags:
        - Cases
      parameters:
        - $ref: '#/components/parameters/queries.iteration.offset'
        - $ref: '#/components/parameters/queries.iteration.limit'
      responses:
        200:
          description: A subset of cases
          headers:
            X-Total:
              $ref: '#/components/headers/iteration.Total'
            X-Remaining:
              $ref: '#/components/headers/iteration.Remaining'
            X-Offset:
              $ref: '#/components/headers/iteration.Offset'
            X-Limit:
              $ref: '#/components/headers/iteration.Limit'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/entities.Case'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'

  /cases/query:
    post:
      summary: Query cases
      operationId: query-cases
      tags:
        - Cases
      requestBody:
        $ref: '#/components/requestBodies/query'
      responses:
        200:
          description: A subset of cases
          headers:
            X-Total:
              $ref: '#/components/headers/iteration.Total'
            X-Remaining:
              $ref: '#/components/headers/iteration.Remaining'
            X-Offset:
              $ref: '#/components/headers/iteration.Offset'
            X-Limit:
              $ref: '#/components/headers/iteration.Limit'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/entities.Case'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'

  /cases/{caseId}:
    parameters:
      - $ref: '#/components/parameters/identifiers.caseId'
    get:
      summary: Get a case
      operationId: get-case
      tags:
        - Cases
      responses:
        200:
          description: Case was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Case'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'
    patch:
      summary: Update a case
      operationId: update-case
      tags:
        - Cases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entities.Case'
      responses:
        200:
          description: Case has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Case'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'
    delete:
      summary: Delete a case
      operationId: delete-case
      tags:
        - Cases
      responses:
        204:
          description: Case was deleted
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'
      
  /cases/{caseId}/images:
    parameters:
      - $ref: '#/components/parameters/identifiers.caseId'
    post:
      summary: Add an image to a case
      operationId: add-case-image
      tags:
        - Cases
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                # TODO: Check whether readOnly $ref fields shows up https://github.com/swagger-api/swagger-ui/issues/3445#issuecomment-490428939
                - $ref: '#/components/schemas/entities.Image'
                - type: object
                  properties:
                    file:
                      type: string
                      format: binary
      responses:
        201:
          description: The image was added to the property
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Image'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'

  /cases/{caseId}/images/{imageId}:
    parameters:
      - $ref: '#/components/parameters/identifiers.caseId'
      - $ref: '#/components/parameters/identifiers.imageId'
    patch:
      summary: Update a case's image
      operationId: update-case-image
      tags:
        - Cases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entities.Image'
      responses:
        200:
          description: Image was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Image'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'
    delete:
      summary: Remove a case's image
      operationId: delete-case-image
      tags:
        - Cases
      responses:
        204:
          description: Image was removed from the case
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'

  /cases/{caseId}/contacts:
    parameters:
      - $ref: '#/components/parameters/identifiers.caseId'
    post:
      summary: Add a contact to a case
      operationId: create-case-contact
      tags:
        - Cases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entities.Contact'
      responses:
        201:
          description: The contact was added to the case
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Contact'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'

  /cases/{caseId}/contacts/{contactId}:
    parameters:
      - $ref: '#/components/parameters/identifiers.caseId'
      - $ref: '#/components/parameters/identifiers.contactId'
    patch:
      summary: Update a case's contact
      operationId: update-case-contact
      tags:
        - Cases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entities.Contact'
      responses:
        200:
          description: Contact was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Contact'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'
    delete:
      summary: Delete a case's contact
      operationId: delete-case-contact
      tags:
        - Cases
      responses:
        204:
          description: Contact was removed from the case
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'

  /cases/{caseId}/attributes:
    parameters:
      - $ref: '#/components/parameters/identifiers.caseId'
    post:
      summary: Add an attribute to a case
      operationId: create-case-attribute
      tags:
        - Cases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entities.Attribute'
      responses:
        201:
          description: The attribute was added to the case
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Attribute'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'

  /cases/{caseId}/attributes/{attributeDefinitionId}:
    parameters:
      - $ref: '#/components/parameters/identifiers.caseId'
      - $ref: '#/components/parameters/identifiers.attributeDefinitionId'
    patch:
      summary: Update a case's attribute
      operationId: update-case-attribute
      tags:
        - Cases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entities.Attribute'
      responses:
        200:
          description: Case was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entities.Attribute'
        400:
          $ref: '#/components/responses/errors.BadRequest'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'
    delete:
      summary: Remove a case's attribute
      operationId: delete-case-attribute
      tags:
        - Cases
      responses:
        204:
          description: Attribute was removed from the case
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'
        404:
          $ref: '#/components/responses/errors.NotFound'

  /attribute-definitions:
    get:
      summary: Get attribute definitions
      operationId: get-attribute-definitions
      tags:
        - Attributes
      parameters:
        - $ref: '#/components/parameters/queries.iteration.offset'
        - $ref: '#/components/parameters/queries.iteration.limit'
      responses:
        200:
          description: A subset of attribute types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/entities.AttributeDefinition'
        401:
          $ref: '#/components/responses/errors.Forbidden'
        403:
          $ref: '#/components/responses/errors.Unauthorized'

    

#    post:
#      summary: Create an attribute type
#      tags:
#        - Marketing
#      requestBody:
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/entities.AttributeDefinition'
#      responses:
#        201:
#          description: The attribute type was created
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/entities.AttributeDefinition'
#        400:
#          $ref: '#/components/responses/errors.BadRequest'
#        401:
#          $ref: '#/components/responses/errors.Forbidden'
#        403:
#          $ref: '#/components/responses/errors.Unauthorized'

#  /attribute-types/{attributeTypeId}:
#    summary: An attribute type
#    parameters:
#      - $ref: '#/components/parameters/identifiers.attributeTypeId'
#    get:
#      summary: Get an attribute type
#      tags:
#        - Marketing
#      responses:
#        200:
#          description: Attribute type was found
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/entities.AttributeDefinition'
#        401:
#          $ref: '#/components/responses/errors.Forbidden'
#        403:
#          $ref: '#/components/responses/errors.Unauthorized'
#        404:
#          $ref: '#/components/responses/errors.NotFound'
#    patch:
#      summary: Update an attribute type
#      tags:
#        - Marketing
#      requestBody:
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/entities.AttributeDefinition'
#      responses:
#        200:
#          description: Attribute type has been updated
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/entities.AttributeDefinition'
#        400:
#          $ref: '#/components/responses/errors.BadRequest'
#        401:
#          $ref: '#/components/responses/errors.Forbidden'
#        403:
#          $ref: '#/components/responses/errors.Unauthorized'
#        404:
#          $ref: '#/components/responses/errors.NotFound'
#    delete:
#      summary: Delete an attribute type
#      tags:
#        - Marketing
#      responses:
#        204:
#          description: Attribute type was deleted
#        401:
#          $ref: '#/components/responses/errors.Forbidden'
#        403:
#          $ref: '#/components/responses/errors.Unauthorized'
#        404:
#          $ref: '#/components/responses/errors.NotFound'

components:
  parameters:

    identifiers.propertyId:
      name: propertyId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/entities.Property.id'
    
    identifiers.tenancyId:
      name: tenancyId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/entities.Tenancy.id'

    identifiers.caseId:
      name: caseId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/entities.Case.id'

    identifiers.imageId:
      name: imageId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/entities.Image.id'

    identifiers.contactId:
      name: contactId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/entities.Contact.id'

    identifiers.attributeDefinitionId:
      name: attributeDefinitionId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/entities.AttributeDefinition.id'

    queries.iteration.offset:
      name: offset
      in: query
      description: >
        How many resources to skip.
      schema:
        type: integer
        format: int32
        default: 0
        minimum: 0
      examples:
        Default:
          summary: summ
          description: desc
          value: 0

    queries.iteration.limit:
      name: limit
      in: query
      description: >
        How many resources to get.
      schema:
        type: integer
        format: int32
        default: 250
        minimum: 0
        maximum: 250

  headers:

    iteration.Remaining:
      description: TODO
      schema:
        type: integer

    iteration.Total:
      description: TODO
      schema:
        type: integer

    iteration.Offset:
      description: TODO
      schema:
        type: integer

    iteration.Limit:
      description: TODO
      schema:
        type: integer

  requestBodies:

    query:
      content:
        application/json:
          schema:
            type: object
            properties:
              paging:
                $ref: '#/components/schemas/query.Paging'
              sorting:
                $ref: '#/components/schemas/query.Sorting'
              filter:
                oneOf:
                  - $ref: '#/components/schemas/query.Filter.Range'
                  - $ref: '#/components/schemas/query.Filter.Like'
                discriminator:
                  propertyName: type
                  mapping:
                    range: '#/components/schemas/query.Filter.Range'
                    like: '#/components/schemas/query.Filter.Like'

  responses:

    errors.BadRequest:
      description: >
        One or more logical errors occured.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errors.Error'

    errors.Forbidden:
      description: >
        Action was not allowed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errors.Error'

    errors.Unauthorized:
      description: >
        Missing authentication information.

    errors.NotFound:
      description: >
        Resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errors.Error'

  schemas:

    entities.Property:
      type: object
      properties:
        id:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/entities.Property.id'
        title:
          type: string
        # TODO: Figure out how to handle internal fields
        comment:
          type: string
        descriptions:
          type: object
          properties:
            tenancy:
              type: string
            property:
              type: string
            area:
              type: string
        depositPeriod:
          type: integer
          format: int32
        prepaidPeriod:
          type: integer
          format: int32
        images:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/entities.Image'
        contacts:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/entities.Contact'
        attributes:
            readOnly: true
            type: array
            items:
              $ref: '#/components/schemas/entities.Attribute'
        integration:
          $ref: '#/components/schemas/entities.Property.Integration'

    entities.Property.id:
      type: string
      format: uuid

    entities.Property.Integration:
      readOnly: true
      type: object
      properties:
        id:
          $ref: '#/components/schemas/entities.Property.Integration.id'
        source:
          type: string

    entities.Property.Integration.id:
      type: string

    entities.Tenancy:
      type: object
      properties:
        id:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/entities.Tenancy.id'
        propertyId:
          allOf:
            - nullable: true
            - $ref: '#/components/schemas/entities.Property.id'
        type:
          $ref: '#/components/schemas/entities.Tenancy.type'
        address:
          $ref: '#/components/schemas/structs.Address'
        size:
          $ref: '#/components/schemas/structs.Size'
        rooms:
          type: integer
          format: int32
        rent:
          $ref: '#/components/schemas/structs.Money'
        prepaid:
          $ref: '#/components/schemas/structs.Expense'
        deposit:
          $ref: '#/components/schemas/structs.Expense'
        costs:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/structs.Expense'
        description:
          type: string
        images:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/entities.Image'
        floorplans:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/entities.Image'
        contacts:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/entities.Contact'
        attributes:
            readOnly: true
            type: array
            items:
              $ref: '#/components/schemas/entities.Attribute'
        integration:
          $ref: '#/components/schemas/entities.Tenancy.Integration'
        
    entities.Tenancy.id:
      type: string
      format: uuid

    entities.Tenancy.type:
      type: string
      enum:
        - Residential
        - Business
        - Parking Lot
        - Antenna
        - Storage
        - Miscellaneous
    
    entities.Tenancy.Integration:
      readOnly: true
      type: object
      properties:
        id:
          $ref: '#/components/schemas/entities.Tenancy.Integration.id'
        source:
          type: string

    entities.Tenancy.Integration.id:
      type: string

    entities.Case:
      type: object
      properties:
        id:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/entities.Case.id'
        state:
          $ref: '#/components/schemas/entities.Case.state'
        visibility:
          $ref: '#/components/schemas/entities.Case.visibility'
        address:
          $ref: '#/components/schemas/structs.Address'
        size:
          $ref: '#/components/schemas/structs.Size'
        rooms:
          type: integer
          format: int32
        rent:
          $ref: '#/components/schemas/structs.Money'
        prepaid:
          $ref: '#/components/schemas/structs.Expense'
        deposit:
          $ref: '#/components/schemas/structs.Expense'
        expenses:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/structs.Expense'
        description:
          type: string
        images:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/entities.Image'
        contacts:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/entities.Contact'
        attributes:
            readOnly: true
            type: array
            items:
              $ref: '#/components/schemas/entities.Attribute'
    entities.Case.id:
      type: string
      format: uuid
      
    entities.Case.state:
      type: string
      enum: [draft, active, archived]
      
    entities.Case.visibility:
      type: string
      enum: [invisible, private, public]

    entities.ExpenseType:
      type: object
      properties:
        id:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/entities.ExpenseType.id'
        text:
          type: string
        
    entities.ExpenseType.id:
      type: string
      format: uuid

    entities.AttributeGroup:
      type: object
      properties:
        id:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/entities.AttributeGroup.id'
        text:
          type: string

    entities.AttributeGroup.id:
      type: string
      format: uuid

    entities.AttributeDefinition:
      type: object
      properties:
        id:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/entities.AttributeDefinition.id'
        kind:
          type: string
          enum: [string, number, boolean, options]
        options:
          type: array
          items:
            type: string
        description:
          type: string
        group:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/entities.AttributeGroup'
        groupId:
          allOf:
            - writeOnly: true
            - $ref: '#/components/schemas/entities.AttributeGroup.id'
        
    entities.AttributeDefinition.id:
      type: string
      format: uuid
    
    entities.Attribute:
      type: object
      properties:
        definition:
          $ref: '#/components/schemas/entities.AttributeDefinition'
        value:
          type: string

    entities.Image:
      type: object
      properties:
        id:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/entities.Image.id'
        original:
          readOnly: true
          type: string
          format: url
        alternatives:
          readOnly: true
          type: array
          items:
            type: object
            properties:
              dimensions:
                type: string
              url:
                type: string
                format: uri
        text:
          type: string

    entities.Image.id:
      type: string
      format: uuid

    entities.ImageGroup:
      type: object
      properties:
        id:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/entities.ImageGroup.id'
        text:
          type: string

    entities.ImageGroup.id:
      type: string
      format: uuid

    entities.Contact:
      type: object
      properties:
        id:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/entities.Contact.id'
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          $ref: '#/components/schemas/structs.Phone'
        roleId:
          allOf:
            - writeOnly: true
            - $ref: '#/components/schemas/entities.Role.id'
        role:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/entities.Role'
    
    entities.Contact.id:
      type: string
      format: uuid

    entities.Role:
      type: object
      properties:
        id:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/entities.Role.id'
        text: 
          type: string
    
    entities.Role.id:
      type: string
      format: uuid
      
    structs.Money:
      type: object
      properties:
        amount:
          type: number
          format: double
        currency:
          $ref: '#/components/schemas/structs.Money.currency'
    
    structs.Coordinates:
      type: object
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double

    structs.Money.currency:
      type: string
      enum: [dkk]

    structs.Expense:
      type: object
      properties:
        period:
          type: integer
          format: int32
        amount:
          $ref: '#/components/schemas/structs.Money'
        type:
          $ref: '#/components/schemas/entities.ExpenseType'
        description:
          type: string

    structs.Phone:
      type: object
      properties:
        extension:
          type: string
        number:
          type: string

    structs.Address:
      type: object
      properties:
        zipCode:
          type: string
        city:
          type: string
        street:
          type: string
        coordinates:
          $ref: '#/components/schemas/structs.Coordinates'

    structs.Size:
      type: object
      properties:
        unit:
          type: string
          enum: [m2]
        value:
          type: number
          format: double

    query.Paging:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        limit:
          type: integer
          format: int32

    query.Sorting:
      type: object
      properties:
        field:
          type: string
          format: field
        direction:
          type: string
          enum: [desc, asc]

    query.Filter:
      type: object
      properties:
        type:
          type: string
          enum: [range, like]
        field:
          type: string
          format: field
          
    query.Filter.Range:
      allOf:
        - $ref: '#/components/schemas/query.Filter'
        - type: object
          properties:
            params:
              type: object
              properties:
                min:
                  type: number
                  format: double
                max:
                  type: number
                  format: double
          
    query.Filter.Like:
      allOf:
        - $ref: '#/components/schemas/query.Filter'
        - type: object
          properties:
            params:
              type: object
              properties:
                value:
                  type: string

    errors.Error:
      type: object
      properties:
        type:
          type: string
        error:
          type: string
        label:
          type: string
    
    errors.Validation:
      allOf:
        - $ref: '#/components/schemas/errors.Error'
        - type: object
          properties:
            field:
              type: string
    
    errors.Authorization.MissingScopes:
      allOf:
        - $ref: '#/components/schemas/errors.Error'
        - type: object
          properties:
            scopesRequired:
              type: array
              items:
                type: string
